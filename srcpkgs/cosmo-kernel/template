# Template file for 'cosmo-kernel'
pkgname=cosmo-kernel
version=4.4.146
revision=0
short_desc="Linux kernel and modules for the Cosmo Communicator"
maintainer="June Carlson <notvelleda@gmail.com>"
license="GPL-2.0-only"
homepage="https://github.com/notvelleda/cosmo-linux-kernel-4.4/"
distfiles="https://github.com/notvelleda/cosmo-linux-kernel-4.4/archive/69a02ab4bacd52e2c631ad2d3d147b831387fb95.zip"
checksum="e6a7869719cd9de9418f21668100864a637a1918c0dac7b04b4055a21a18ae7a"
python_version=3

nodebug=yes # -dbg package is generated below manually
nostrip=yes
noverifyrdeps=yes
noshlibprovides=yes
preserve=yes

archs="aarch64*"
hostmakedepends="tar xz bc elfutils-devel flex gmp-devel kmod libmpc-devel openssl-devel perl uboot-mkimage cpio python3 dtc rsync"

_kernver="${version}_moth${revision}"
triggers="kernel-hooks"
kernel_hooks_version="${_kernver}"

# These files could be modified when an external module is built.
mutable_files="
 /usr/lib/modules/${_kernver}/modules.builtin.bin
 /usr/lib/modules/${_kernver}/modules.builtin.alias.bin
 /usr/lib/modules/${_kernver}/modules.softdep
 /usr/lib/modules/${_kernver}/modules.dep
 /usr/lib/modules/${_kernver}/modules.dep.bin
 /usr/lib/modules/${_kernver}/modules.symbols
 /usr/lib/modules/${_kernver}/modules.symbols.bin
 /usr/lib/modules/${_kernver}/modules.alias
 /usr/lib/modules/${_kernver}/modules.alias.bin
 /usr/lib/modules/${_kernver}/modules.devname"

# reproducible build
export KBUILD_BUILD_TIMESTAMP=${SOURCE_DATE_EPOCH:-0}
export KBUILD_BUILD_USER=voidlinux
export KBUILD_BUILD_HOST=voidlinux

do_configure() {
	local _args

	if [ "$CROSS_BUILD" ]; then
		_args="CROSS_COMPILE=${XBPS_CROSS_TRIPLET}-"
	fi

	mkdir KERNEL_OUT
	make ${makejobs} O=KERNEL_OUT ARCH=arm64 ${_args} cosmo_patched_defconfig

	# Always use our revision to CONFIG_LOCALVERSION to match our pkg version.
	sed -i -e "s|^\(CONFIG_LOCALVERSION=\).*|\1\"_moth${revision}\"|" KERNEL_OUT/.config
}

do_build() {
	local arch _cross _args

	if [ "$CROSS_BUILD" ]; then
		_cross="CROSS_COMPILE=${XBPS_CROSS_TRIPLET}-"
	fi
	export LDFLAGS=

	make ${makejobs} O=KERNEL_OUT ARCH=arm64 ${_cross}
}

do_install() {
	local _args hdrdest

	# Run depmod after compressing modules.
	sed -i '2iexit 0' scripts/depmod.sh

	# Install kernel, firmware and modules
	make ${makejobs} O=KERNEL_OUT ARCH=arm64 INSTALL_MOD_PATH=${DESTDIR} modules_install

	hdrdest=${DESTDIR}/usr/src/kernel-headers-${_kernver}

	vinstall KERNEL_OUT/.config 644 boot config-${_kernver}
	vinstall KERNEL_OUT/System.map 644 boot System.map-${_kernver}

	vinstall KERNEL_OUT/arch/arm64/boot/Image.gz-dtb 644 boot vmlinux-${_kernver}

	# copy all generated headers back into the kernel source directory so i don't have to fuck with all of this
	for file in $(find KERNEL_OUT -type f -name "*.h" | cut -c 12-); do
		mkdir -p $(dirname ./$file)
		cp -a KERNEL_OUT/$file ./$file
	done

	# Switch to /usr.
	vmkdir usr
	mv ${DESTDIR}/lib ${DESTDIR}/usr

	cd ${DESTDIR}/usr/lib/modules/${_kernver}
	rm -f source build
	ln -sf ../../../src/kernel-headers-${_kernver} build

	cd ${wrksrc}
	# Install required headers to build external modules
	install -Dm644 Makefile ${hdrdest}/Makefile
	install -Dm644 kernel/Makefile ${hdrdest}/kernel/Makefile
	install -Dm644 KERNEL_OUT/.config ${hdrdest}/.config
	for file in $(find . -name Kconfig\*); do
		mkdir -p ${hdrdest}/$(dirname $file)
		install -Dm644 $file ${hdrdest}/${file}
	done
	for file in $(find arch/arm64 -name module.lds -o -name Kbuild.platforms -o -name Platform); do
		mkdir -p ${hdrdest}/$(dirname $file)
		install -Dm644 $file ${hdrdest}/${file}
	done
	mkdir -p ${hdrdest}/include
	# Remove firmware stuff provided by the "linux-firmware" pkg.
	rm -rf ${DESTDIR}/usr/lib/firmware

	for i in acpi asm-generic clocksource config crypto drm generated linux math-emu media net pcmcia scsi sound trace uapi video xen dt-bindings; do
		if [ -d include/$i ]; then
			cp -a include/$i ${hdrdest}/include
		fi
	done

	cd ${wrksrc}
	mkdir -p ${hdrdest}/arch/arm64
	cp -a arch/arm64/include ${hdrdest}/arch/arm64

	# Remove helper binaries built for host,
	# if generated files from the scripts/ directory need to be included,
	# they need to be copied to ${hdrdest} before this step
	if [ "$CROSS_BUILD" ]; then
		make ${makejobs} O=KERNEL_OUT ARCH=arm64 _mrproper_scripts
		# remove host specific objects as well
		find scripts -name '*.o' -delete
	fi

	# Copy files necessary for later builds, like nvidia and vmware
	cp KERNEL_OUT/Module.symvers ${hdrdest}
	cp -a scripts ${hdrdest}
	mkdir -p ${hdrdest}/security/selinux
	cp -a security/selinux/include ${hdrdest}/security/selinux
	mkdir -p ${hdrdest}/tools/include
	cp -a tools/include/tools ${hdrdest}/tools/include

	mkdir -p ${hdrdest}/arch/arm64/kernel
	cp arch/arm64/Makefile ${hdrdest}/arch/arm64
	mkdir -p ${hdrdest}/arch/arm64/kernel
	cp -a arch/arm64/kernel/vdso ${hdrdest}/arch/arm64/kernel/

	# add headers for lirc package
	# pci
	for i in bt8xx cx88 saa7134; do
		mkdir -p ${hdrdest}/drivers/media/pci/${i}
		cp -a drivers/media/pci/${i}/*.h ${hdrdest}/drivers/media/pci/${i}
	done
	# usb
	for i in cpia2 em28xx pwc; do
		mkdir -p ${hdrdest}/drivers/media/usb/${i}
		cp -a drivers/media/usb/${i}/*.h ${hdrdest}/drivers/media/usb/${i}
	done
	# i2c
	mkdir -p ${hdrdest}/drivers/media/i2c
	cp drivers/media/i2c/*.h ${hdrdest}/drivers/media/i2c
	for i in cx25840; do
		mkdir -p ${hdrdest}/drivers/media/i2c/${i}
		cp -a drivers/media/i2c/${i}/*.h ${hdrdest}/drivers/media/i2c/${i}
	done

	# Add docbook makefile
	install -Dm644 Documentation/DocBook/Makefile ${hdrdest}/Documentation/DocBook/Makefile

	# Add md headers
	mkdir -p ${hdrdest}/drivers/md
	cp drivers/md/*.h ${hdrdest}/drivers/md

	# Add inotify.h
	mkdir -p ${hdrdest}/include/linux
	cp include/linux/inotify.h ${hdrdest}/include/linux

	# Add wireless headers
	mkdir -p ${hdrdest}/net/mac80211/
	cp net/mac80211/*.h ${hdrdest}/net/mac80211

	# add dvb headers for external modules
	#mkdir -p ${hdrdest}/include/config/dvb/
	#cp include/config/dvb/*.h ${hdrdest}/include/config/dvb/

	# add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
	#mkdir -p ${hdrdest}/drivers/media/dvb-frontends
	#cp drivers/media/dvb-frontends/lgdt330x.h ${hdrdest}/drivers/media/dvb-frontends/
	#cp drivers/media/i2c/msp3400-driver.h ${hdrdest}/drivers/media/i2c/

	# add dvb headers
	#mkdir -p ${hdrdest}/drivers/media/usb/dvb-usb
	#cp drivers/media/usb/dvb-usb/*.h ${hdrdest}/drivers/media/usb/dvb-usb/
	#mkdir -p ${hdrdest}/drivers/media/dvb-frontends
	#cp drivers/media/dvb-frontends/*.h ${hdrdest}/drivers/media/dvb-frontends/
	#mkdir -p ${hdrdest}/drivers/media/tuners
	#cp drivers/media/tuners/*.h ${hdrdest}/drivers/media/tuners/

	# Add xfs and shmem for aufs building
	mkdir -p ${hdrdest}/fs/xfs/libxfs
	mkdir -p ${hdrdest}/mm
	cp fs/xfs/libxfs/xfs_sb.h ${hdrdest}/fs/xfs/libxfs/xfs_sb.h

	# Remove unneeded architectures
	for arch in alpha avr32 blackfin cris frv h8300 ia64 m* s* um v850 xtensa x86* p*; do
		rm -rf ${hdrdest}/arch/arm64
	done
	# Keep arch/x86/ras/Kconfig as it is needed by drivers/ras/Kconfig
	mkdir -p ${hdrdest}/arch/x86/ras
	cp -a arch/x86/ras/Kconfig ${hdrdest}/arch/x86/ras/Kconfig

	# Extract debugging symbols and compress modules
	msg_normal "$pkgver: extracting debug info and compressing modules, please wait...\n"
	install -Dm644 KERNEL_OUT/vmlinux ${DESTDIR}/usr/lib/debug/boot/vmlinux-${_kernver}
	(
	cd ${DESTDIR}
	export DESTDIR
	find ./ -name '*.ko' -print0 | xargs -0r -n1 -P ${XBPS_MAKEJOBS} ${FILESDIR}/mv-debug
	)
	# ... and run depmod again.
	depmod -b ${DESTDIR}/usr -F KERNEL_OUT/System.map ${_kernver}
}

cosmo-kernel-headers_package() {
	preserve=yes
	nostrip=yes
	noshlibprovides=yes
	short_desc+=" - source headers for 3rd party modules"

	pkg_install() {
		vmove usr/src
		vmove usr/lib/modules/${_kernver}/build
	}
}

cosmo-kernel-dbg_package() {
	preserve=yes
	nostrip=yes
	noverifyrdeps=yes
	noshlibprovides=yes
	repository=debug
	short_desc+=" - debugging symbols"

	pkg_install() {
		vmove usr/lib/debug
		vmove "boot/System.map-${_kernver}"
	}
}
